
import java.util.HashMap;

public class main {

	public static void main(String []args)
	{
		 String str = "ABCDABDEFGCABD";
		 String longestSubstring = getLongestSubstringNonRepeatingChars(str);
		 System.out.println("Longest substring non repeating chars by linear time method:\t" + longestSubstring);
		 
		 System.out.println();
	}
	
	public static String getLongestSubstringNonRepeatingChars(String str) 
	{
		if(str == null)
			return null;
		int n = str.length();
		if(n <2)
			return str;
		int[] charIndexes = new int[256];
		for(int i=0; i< n; i++)
			charIndexes[i] =-1;
		
		charIndexes[str.charAt(0)] =0;
		int currLength =1;
		int maxLength =1;
		int prevIdx =0;
		int startIdx =0 ;
		
		for(int i=1; i<n; i++)
		{
			prevIdx = charIndexes[str.charAt(i)];
			if(prevIdx == -1 || i-currLength > prevIdx)
			{
				currLength++;
			}
			else
			{
				if(currLength > maxLength)
				{
					maxLength = currLength;
					startIdx = i-maxLength;
				}
				currLength = i - prevIdx;
			}
			charIndexes[str.charAt(i)] = i;
			
		}
		if(currLength > maxLength)
		{
			maxLength = currLength;
			startIdx = n-maxLength;
		}
		return str.substring(startIdx, startIdx+maxLength);
		       
	}

}

